[push]
  default = nothing

[alias]
  aliases = config --get-regexp alias

  me = config --get-regexp user

  s   = status
  st  = status
  ss  = status -s
  sh  = show
  so  = remote show origin
  # pull/push/fetch
  ft  = fetch
  ftp = fetch --prune
  up  = pull --rebase       # pull rebase
  po  = push origin         # push origin
  pof = push -f origin      # force
  pu  = push -u origin      # push origin and set upstream
  # rebase
  rbm = rebase --merge master       # masterへのrebaseはよく使うのでalias
  rbd = rebase --merge develop
  rbc = rebase --continue
  rba = rebase --abort
  rbi = rebase -i
  rbi1 = rebase -i HEAD^
  rbi2 = rebase -i HEAD^^
  rbi3 = rebase -i HEAD^^^
  rbi4 = rebase -i HEAD^^^^
  rbi5 = rebase -i HEAD^^^^^
  # merge
  mn  = merge --no-ff
  rebase-and-merge = "!f() { git checkout $2 && git rebase --merge --no-ff $1 && git checkout $1 && git merge --no-ff $2 && echo '' && echo \"branch $2 is rebased onto $1 and merged into $1\"; }; f"
  ram = "!f() { git rebase-and-merge $1 $2 ;}; f"
  # comit
  ad  = add
  c   = commit
  ci  = commit -a           # modifiedなファイルを全てstageへ
  cam = commit -a --amend   # 直前のcommitを修正
  co  = checkout
  cb  = checkout -b         # branch切ってcheckoutする
  ct  = checkout --track    # remoteのbranchを追跡
  cm  = checkout master
  cd  = checkout develop
  # branch関連
  br  = branch
  ba  = branch -a           # originも含めた全てのbranchを表示
  bm  = branch --merged     # merge済みのbranchを表示
  bn  = branch --no-merged  # mergeしてないbranchを表示
  bo  = branch -r           # remote branchを表示
  # log関連
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; nvim `f`"
  wc  = whatchanged         # logに変更されたファイルも一緒に出す
  ls  = log --stat          # logに変更されたファイルも一緒に出す
  lp  = log -p              # diffも一緒に出す
  la  = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
  lr  = log origin          # originのlog
  ll = log --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn%x09%Creset%s' # onelineでlogを出す
  ll1 = log --date=short --max-count=1 --pretty=format:'%Cgreen%h %cd %Cblue%cn%x09%Creset%s' # onelineでlogを出す
  lll = log --date=short --max-count=10 --pretty=format:'%Cgreen%h %cd %Cblue%cn%x09%Creset%s' # onelineでlogを出す
  oneline = log --pretty=oneline
  ranking = shortlog -s -n --no-merges
  # logをtree表示
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  # diff関連
  di = diff
  dm = diff master           # masterとのdiff
  dw = diff --color-words    # 単語単位でいろつけてdiff
  dc = diff --cached         # addされているものとのdiff
  ds = diff --staged         # 同上(1.6.1移行)
  d1 = diff HEAD~            # HEADから1つ前とdiff
  d2 = diff HEAD~~           # HEADから2つ前とdiff
  d3 = diff HEAD~~~          # HEADから3つ前とdiff
  d4 = diff HEAD~~~~         # HEADから4つ前とdiff
  d5 = diff HEAD~~~~~        # HEADから5つ前とdiff
  d10 = diff HEAD~~~~~~~~~~  # HEADから10前とdiff
  # git-brrowse-remote https://github.com/motemen/git-browse-remote
  brs = browse-remote
  brspr = browse-remote --pr

  # costum
  del-merged = "!f() { git branch --merged | grep -v \"*\" | grep -v \"master\" | xargs -I@ git branch -d @ ;}; f"

[user]
	email = j-tokumori@bns-g.com
	name = Junya Tokumori
[core]
	editor = vim -c \"set fenc=utf-8\"
